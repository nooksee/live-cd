#!/usr/bin/env bash

# LiveCD Creator 3
# Copyright (C) 2012-2014  Kevin Atwood
# 
# Customizer - Advanced LiveCD Remastering Tool
# Copyright (C) 2010-2013  Ivailo Monev
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

Reset='\e[0m'
Red='\e[1;31m'
Blue='\e[1;34m'
Yellow='\e[1;33m'

############################# Common Functions #################################

INFO_MESSAGE() {
if [ "$MESSAGES_COLORS" = "1" ];then
    echo -e "[${Yellow}*${Reset}] ${Blue}$1${Reset}"
else
    echo -e "[*] $1"
    fi
}

EXTRA_INFO_MESSAGE() {
if [ "$MESSAGES_COLORS" = "1" ];then
    echo -e "[${Yellow}*${Reset}] ${Blue}$1${Reset}: ${Yellow}$2${Reset}"
else
    echo -e "[*] $1: $2"
    fi
}

QUESTION_MESSAGE() {
if [ "$MESSAGES_COLORS" = "1" ];then
    echo -ne "[${Yellow}?${Reset}] ${Blue}$1${Reset} "
else
    echo -ne "[*] $1 "
    fi
}

EXTRA_QUESTION_MESSAGE() {
if [ "$MESSAGES_COLORS" = "1" ];then
    echo -ne "[${Yellow}?${Reset}] ${Blue}$1${Reset} [${Yellow}$2${Reset}] "
else
    echo -ne "[*] $1 [$2] "
    fi
}

WARNING_MESSAGE() {
	if [ "$MESSAGES_COLORS" = "1" ];then
        echo -e "[${Red}!${Reset}] ${Yellow}$1${Reset}"
    else
        echo -e "[!] $1"
    fi
}

EXTRA_WARNING_MESSAGE() {
    if [ "$MESSAGES_COLORS" = "1" ];then
        echo -e "[${Red}!${Reset}] ${Yellow}$1${Reset}: ${Blue}$2${Reset}"
    else
         echo -e "[!] $1: $2" 
    fi
}

ERROR_MESSAGE() {
    if [ "$MESSAGES_COLORS" = "1" ];then
        echo -e "[${Red}X${Reset}] ${Yellow}$1${Reset}"
    else
        echo -e "[X] $1"
    fi
    read nada
    exit 2
}

ERROR_MESSAGE_NO_EXIT() {
    if [ "$MESSAGES_COLORS" = "1" ];then
        echo -e "[${Red}X${Reset}] ${Yellow}$1${Reset}"
    else
        echo -e "[X] $1"
    fi
    read nada
}

EXTRA_ERROR_MESSAGE() {
    if [ "$MESSAGES_COLORS" = "1" ];then
        echo -e "[${Red}X${Reset}] ${Yellow}$1${Reset}: ${Blue}$2${Reset}"
	else
        echo -e "[X] $1: $2"
    fi
    read nada
	exit 2
}

EXTRA_ERROR_MESSAGE_NOT_EXIT() {
    if [ "$MESSAGES_COLORS" = "1" ];then
        echo -e "[${Red}X${Reset}] ${Yellow}$1${Reset}: ${Blue}$2${Reset}"
	else
        echo -e "[X] $1: $2"
    fi
    read nada
}

__check_lock__() {
    INFO_MESSAGE "Checking for FileSystem lock"
    if [ "$FORCE_CHROOT" = "1" ];then
        WARNING_MESSAGE "FileSystem lock check skipped!"
    else
        if [ -e "$WORK_DIR/FileSystem/tmp/lock_chroot" ];then 
            ERROR_MESSAGE "FileSystem is locked!"
        fi
    fi
}

__check_fs_dir__ () {
    INFO_MESSAGE "Checking FileSystem"
    if [ ! -d "$WORK_DIR/FileSystem" ];then
        ERROR_MESSAGE "FileSystem path does not exist!"
    fi

    if [ ! -d "$WORK_DIR/FileSystem/etc" ] || [ ! -d "$WORK_DIR/FileSystem/usr" ] || [ ! -d "$WORK_DIR/FileSystem/root" ];then
        ERROR_MESSAGE "FileSystem path is not usable or has been corrupted!"
    fi
}

__check_sources_list__ () {
    # FIXME: strip it from all scripts, this funcion was bogus
    true
}

__check_for_X__ () {
    INFO_MESSAGE "Checking whether x-server is running"
    if [ -z "`pgrep Xorg`" ];then
        ERROR_MESSAGE "X-server is not running!"
    fi
}


__chroot__() {
    local CHROOT_OPTS="env HOME=/root LC_ALL=${LOCALES} LANGUAGE=${LOCALES} LANG=${LOCALES}"
    
    INFO_MESSAGE "Preparing work environment"
    cp -f /etc/hosts "$WORK_DIR/FileSystem/etc"
    cp -f /etc/resolv.conf "$WORK_DIR/FileSystem/etc"
    echo chroot > "$WORK_DIR/FileSystem/etc/debian_chroot"
    ln -sf /proc/mounts "$WORK_DIR/FileSystem/etc/mtab"
    touch "$WORK_DIR/FileSystem/tmp/lock_chroot"
    
    INFO_MESSAGE "Setting up locale"
    chroot "$WORK_DIR/FileSystem" ${CHROOT_OPTS} locale-gen ${LOCALES}

    INFO_MESSAGE "Blocking files"
    for f in "$WORK_DIR/FileSystem/sbin/initctl" "$WORK_DIR/FileSystem/usr/sbin/update-grub" $(find "$WORK_DIR/FileSystem/etc/init.d" -type f ! -name "*.blocked");do
        if [ ! -e "${f}.blocked" ];then
            mv "${f}" "${f}.blocked"
            chroot "$WORK_DIR/FileSystem" ${CHROOT_OPTS} ln -s /bin/true "${f##*FileSystem}"
        else
            WARNING_MESSAGE "Blocking of ${f} skipped!"
        fi
    done

    if [ "$APT_HELPER" = "1" ];then
        INFO_MESSAGE "Updating package database"
        chroot "$WORK_DIR/FileSystem" ${CHROOT_OPTS} apt-get update -qq
        
        INFO_MESSAGE "Making sure everything is configured"
        chroot "$WORK_DIR/FileSystem" ${CHROOT_OPTS} dpkg --configure -a
        chroot "$WORK_DIR/FileSystem" ${CHROOT_OPTS} apt-get install -f -y -q
    fi

    chroot "$WORK_DIR/FileSystem" ${CHROOT_OPTS} ${@} || WARNING_MESSAGE "chroot has returned exit status"

    INFO_MESSAGE "Unblocking files"
    for f in "$WORK_DIR/FileSystem/sbin/initctl.blocked" "$WORK_DIR/FileSystem/usr/sbin/update-grub.blocked" $(find "$WORK_DIR/FileSystem/etc/init.d" -type f -name "*.blocked");do
        if [ -h "${f//.blocked/}" ];then
            rm -f "${f//.blocked/}"
            mv "${f}" "${f//.blocked/}"
        elif [ -f "${f}" ];then
            _f="${f//*FileSystem/}"
            _f="${f//.blocked/}"
            WARNING_MESSAGE "${_f} has been updated, removing blocked file!"
            rm -f "${f}"
        else
            WARNING_MESSAGE "Unblocking of ${f} skipped!"
        fi
    done

    INFO_MESSAGE "Cleaning up work directories"
    chroot "$WORK_DIR/FileSystem" ${CHROOT_OPTS} apt-get autoremove --purge
    chroot "$WORK_DIR/FileSystem" ${CHROOT_OPTS} apt-get autoclean
    chroot "$WORK_DIR/FileSystem" ${CHROOT_OPTS} apt-get clean
    rm -f "$WORK_DIR/FileSystem/etc/"{debian_chroot,hosts,mtab}
    rm -f "$WORK_DIR/FileSystem/boot/"*.bak
    rm -f "$WORK_DIR/FileSystem/var/lib/dpkg/"*-old
    rm -f "$WORK_DIR/FileSystem/var/lib/aptitude/"*.old
    rm -f "$WORK_DIR/FileSystem/var/cache/debconf/"*-old
    rm -f "$WORK_DIR/FileSystem/var/log/"*.gz
    rm -f "$WORK_DIR/FileSystem/etc/apt/trusted.gpg~"
    rm -f "$WORK_DIR/FileSystem/etc/group-" "$WORK_DIR/FileSystem/etc/passwd-"
    rm -f "$WORK_DIR/FileSystem/etc/gshadow-" "$WORK_DIR/FileSystem/etc/shadow-"
    rm -f "$WORK_DIR/FileSystem/var/log/apt/term.log"
    rm -rf "$WORK_DIR/FileSystem/tmp/"* "$WORK_DIR/FileSystem/tmp/".??*
}

__update_distro_name__() {
    if [ -e "$WORK_DIR/FileSystem/usr/bin/software-center" ];then
        cust_rel="`cat "$WORK_DIR/FileSystem/etc/lsb-release" | grep DISTRIB_ID | cut -d '=' -f 2`"
        s="$cust_rel"
        cust_rel_class="`awk '{for (i=1; i<=NF; i++) printf toupper(substr($i, 1, 1)) tolower(substr($i,2)); print ""}' <<< "$s"`"
        cust_rel_module="`awk '{ print tolower($0) }' <<< "$s"`"

        INFO_MESSAGE "Updating distribution code name"
        if [ "$cust_rel" != "Ubuntu" ]; then
	    if [ ! -e "$WORK_DIR/FileSystem/usr/share/software-center/softwarecenter/distro/ubuntu.py" ]; then
                cp -f "$WORK_DIR/FileSystem/usr/share/software-center/softwarecenter/distro/Ubuntu.py" "$WORK_DIR/FileSystem/usr/share/software-center/softwarecenter/distro/$cust_rel_class.py"
	        sed -i 's/class Ubuntu(Debian):/class '$cust_rel_class'(Debian):/g' $WORK_DIR/FileSystem/usr/share/software-center/softwarecenter/distro/$cust_rel_class.py
                cp -f "$WORK_DIR/FileSystem/usr/share/python-apt/templates/Ubuntu.info" "$WORK_DIR/FileSystem/usr/share/python-apt/templates/$cust_rel.info"
                cp -f "$WORK_DIR/FileSystem/usr/share/python-apt/templates/Ubuntu.mirrors" "$WORK_DIR/FileSystem/usr/share/python-apt/templates/$cust_rel.mirrors"
	    else
                cp -f "$WORK_DIR/FileSystem/usr/share/software-center/softwarecenter/distro/ubuntu.py" "$WORK_DIR/FileSystem/usr/share/software-center/softwarecenter/distro/$cust_rel_module.py"
                sed -i 's/class Ubuntu(Debian):/class '$cust_rel_class'(Debian):/g' $WORK_DIR/FileSystem/usr/share/software-center/softwarecenter/distro/$cust_rel_module.py
                cp -f "$WORK_DIR/FileSystem/usr/share/python-apt/templates/Ubuntu.info" "$WORK_DIR/FileSystem/usr/share/python-apt/templates/$cust_rel.info"
                cp -f "$WORK_DIR/FileSystem/usr/share/python-apt/templates/Ubuntu.mirrors" "$WORK_DIR/FileSystem/usr/share/python-apt/templates/$cust_rel.mirrors"
	    fi
        fi
    fi
}

__mount_sys__ () {
    if [ "`grep "$WORK_DIR/FileSystem/dev" /proc/mounts`" = "" ];then  
		EXTRA_INFO_MESSAGE "Mounting" "/dev"
		mount --rbind /dev "$WORK_DIR/FileSystem/dev" || EXTRA_ERROR_MESSAGE_NOT_EXIT "Unable to mount /dev to" "$WORK_DIR/FileSystem/dev"
	else
		EXTRA_WARNING_MESSAGE "/dev is already mounted on" "$WORK_DIR/FileSystem/dev"
	fi
	
	if [ "`grep "$WORK_DIR/FileSystem/proc" /proc/mounts`" = "" ];then
		EXTRA_INFO_MESSAGE "Mounting" "/proc"
		mount --bind /proc "$WORK_DIR/FileSystem/proc" || EXTRA_ERROR_MESSAGE_NOT_EXIT "Unable to mount /proc to" "$WORK_DIR/FileSystem/proc"
    else
		EXTRA_WARNING_MESSAGE "/proc is already mounted on" "$WORK_DIR/FileSystem/proc"
	fi
	
	if [ "`grep "$WORK_DIR/FileSystem/sys" /proc/mounts`" = "" ];then
		EXTRA_INFO_MESSAGE "Mounting" "/sys"
		mount --bind /sys "$WORK_DIR/FileSystem/sys" || EXTRA_ERROR_MESSAGE_NOT_EXIT "Unable to mount /sys to" "$WORK_DIR/FileSystem/sys"
	else
		EXTRA_WARNING_MESSAGE "/sys is already mounted on" "$WORK_DIR/FileSystem/sys"
	fi
}

__umount_sys__ () {
	if [ "`grep "$WORK_DIR/FileSystem/sys" /proc/mounts`" = "" ];then
		EXTRA_WARNING_MESSAGE "/sys is not mounted on" "$WORK_DIR/FileSystem/sys"
	else
		EXTRA_INFO_MESSAGE "Unmounting" "/sys"
		umount -fl "$WORK_DIR/FileSystem/sys" || EXTRA_ERROR_MESSAGE "Unable to unmount /sys from" "$WORK_DIR/FileSystem/sys"
    fi
	
	if [ "`grep "$WORK_DIR/FileSystem/proc" /proc/mounts`" = "" ];then
		EXTRA_WARNING_MESSAGE "/proc is not mounted on" "$WORK_DIR/FileSystem/proc"
	else
		EXTRA_INFO_MESSAGE "Unmounting" "/proc"
		umount -fl "$WORK_DIR/FileSystem/proc" || EXTRA_ERROR_MESSAGE "Unable to unmount /proc from" "$WORK_DIR/FileSystem/proc"
    fi
	
	if [ "`grep "$WORK_DIR/FileSystem/dev" /proc/mounts`" = "" ];then
		EXTRA_WARNING_MESSAGE "/dev is not mounted on" "$WORK_DIR/FileSystem/sys"
	else
		EXTRA_INFO_MESSAGE "Unmounting" "/dev"
		umount -fl "$WORK_DIR/FileSystem/dev" || EXTRA_ERROR_MESSAGE "Unable to unmount /dev from" "$WORK_DIR/FileSystem/dev"
	fi
}

__recursive_umount__ () {
INFO_MESSAGE "Verbose unmounting"
for i in `grep "$WORK_DIR/FileSystem" /proc/mounts | cut -d' ' -f2 | sed 's/\\\040/ /g'`; do
	EXTRA_INFO_MESSAGE "Unmounting" "`echo $i | sed "s@$WORK_DIR/FileSystem@@g"`"
	umount -fl "$i" || EXTRA_WARNING_MESSAGE "Unable to unmount" "$i"
done
}

__mount_dbus__ () {
mkdir -p "$WORK_DIR/FileSystem/var/lib/dbus"
mkdir -p "$WORK_DIR/FileSystem/var/run/dbus"

EXTRA_INFO_MESSAGE "Mounting" "/var/lib/dbus"
mkdir -p "$WORK_DIR/FileSystem/var/lib/dbus"
mount --bind /var/lib/dbus "$WORK_DIR/FileSystem/var/lib/dbus" || EXTRA_WARNING_MESSAGE "Unable to mount /var/lib/dbus to" "$WORK_DIR/FileSystem/var/lib/dbus"

# mount --bind get's confused if $WORK_DIR/FileSystem/var/run is symlink to /run (absolute path symlink)
if [ -h "$WORK_DIR/FileSystem/var/run" ];then
	EXTRA_INFO_MESSAGE "Mounting" "/run/dbus"
	mkdir -p "$WORK_DIR/FileSystem/run/dbus" 
	mount --bind /run/dbus "$WORK_DIR/FileSystem/run/dbus" || EXTRA_WARNING_MESSAGE "Unable to mount /run/dbus to" "$WORK_DIR/FileSystem/run/dbus"
else
	EXTRA_INFO_MESSAGE "Mounting" "/var/run/dbus"
	mkdir -p "$WORK_DIR/FileSystem/var/run/dbus" 
	mount --bind /var/run/dbus "$WORK_DIR/FileSystem/var/run/dbus" || EXTRA_WARNING_MESSAGE "Unable to mount /var/run/dbus to" "$WORK_DIR/FileSystem/var/run/dbus"
fi
}

__allow_local_X_access__() {
    INFO_MESSAGE "Allwoing local access to x-server"
    xhost +local:
}

__block_local_X_access__() {
    INFO_MESSAGE "Blocking local access to x-server"
    xhost -local:
}

__purge_work_dirs__() {
    __check_lock__
    __recursive_umount__
    
    EXTRA_INFO_MESSAGE "Purging" "$WORK_DIR/FileSystem"
	rm -rf "$WORK_DIR/FileSystem" || ERROR_MESSAGE "Unable to purge FileSystem directory"
    
	EXTRA_INFO_MESSAGE "Purging" "$WORK_DIR/ISO"
	rm -rf "$WORK_DIR/ISO" || ERROR_MESSAGE "Unable to purge the ISO directory"
}