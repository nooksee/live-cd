#!/usr/bin/env bash

# LiveCD Creator 3
# Copyright (C) 2012-2014  Kevin Atwood
# 
# Customizer - Advanced LiveCD Remastering Tool
# Copyright (C) 2010-2013  Ivailo Monev
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

set -u
source /etc/live-cd/common
source /etc/live-cd/default

################## check configs & dirs before going further ###################

__check_fs_dir__
__check_lock__
__update_distro_name__
__check_sources_list__

if [ ! -d "$WORK_DIR/ISO/isolinux" ]; then
	ERROR_MESSAGE "$WORK_DIR/ISO/isolinux does not exist!"
fi

if [ ! -d "$WORK_DIR/ISO/.disk" ]; then
	EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/.disk"
	mkdir -p "$WORK_DIR/ISO/.disk"
fi

if [ ! -d "$WORK_DIR/ISO/casper" ]; then
	EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/casper"
	mkdir -p "$WORK_DIR/ISO/casper"
fi

if [ ! -e "$WORK_DIR/ISO/.disk/cd_type" ]; then
	EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/.disk/cd_type"
	echo "full_cd/single" > "$WORK_DIR/ISO/.disk/cd_type"
fi

if [ -e "$WORK_DIR/usr/bin/ubiquity" ] && [ ! -e "$WORK_DIR/ISO/.disk/base_installable" ]; then
    EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/.disk/base_installable"
    echo > "$WORK_DIR/ISO/.disk/base_installable"
else
    rm -f "$WORK_DIR/ISO/.disk/base_installable"
fi

if [ ! -e "$WORK_DIR/ISO/.disk/casper-uuid-generic" ]; then
    EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/.disk/casper-uuid-generic"
    echo "f01d0b93-4f0e-4e95-93ae-e3d0e114d4f7" > "$WORK_DIR/ISO/.disk/casper-uuid-generic"
fi

if [ ! -e "$WORK_DIR/ISO/.disk/release_notes_url" ]; then
    EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/.disk/release_notes_url"
    echo "http://www.ubuntu.com/getubuntu/releasenotes" > "$WORK_DIR/ISO/.disk/release_notes_url"
fi

if [ ! -e "$WORK_DIR/FileSystem/etc/lsb-release" ]; then
    ERROR_MESSAGE "$WORK_DIR/FileSystem/etc/lsb-release does not exist!"
fi

if [ ! -e "$WORK_DIR/FileSystem/etc/casper.conf" ]; then
    ERROR_MESSAGE "$WORK_DIR/FileSystem/etc/casper.conf does not exist!"
fi

####################### setting up the root filesystem #########################

INFO_MESSAGE "Loading distribution information"
ARCH=`chroot "$WORK_DIR/FileSystem" dpkg --print-architecture` || ERROR_MESSAGE "Unable to chroot and get the architecture of the distribution FileSystem!"
RELEASE_NOTES_URL="`cat "$WORK_DIR/ISO/.disk/release_notes_url"`"
DIST=`grep DISTRIB_ID= "$WORK_DIR/FileSystem/etc/lsb-release" | sed 's/DISTRIB_ID=//;s/\"//g'` || ERROR_MESSAGE "Unable to chroot and get the distribution identification"
VERSION=`grep DISTRIB_RELEASE= "$WORK_DIR/FileSystem/etc/lsb-release" | sed 's/DISTRIB_RELEASE=//;s/\"//g'` || ERROR_MESSAGE "Unable to get the distribution version"
CODENAME=`grep DISTRIB_CODENAME= "$WORK_DIR/FileSystem/etc/lsb-release" | sed 's/DISTRIB_CODENAME=//;s/\"//g'` || ERROR_MESSAGE "Unable to get the distribution code name"
LIVEUSERNAME=`grep "export USERNAME=" "$WORK_DIR/FileSystem/etc/casper.conf" | sed 's/export USERNAME=//;s/\"//g'` || ERROR_MESSAGE "Unable get the user name"

to_clean="$WORK_DIR/$DIST-$ARCH-$VERSION.iso $WORK_DIR/ISO/casper/filesystem.squashfs \
$WORK_DIR/ISO/casper/initrd.lz $WORK_DIR/ISO/casper/vmlinuz $WORK_DIR/ISO/casper/vmlinuz.efi \
$WORK_DIR/ISO/casper/filesystem.manifest $WORK_DIR/ISO/casper/filesystem.manifest-desktop \
$WORK_DIR/ISO/casper/filesystem.size $WORK_DIR/ISO/casper/README.diskdefines $WORK_DIR/ISO/md5sum.txt"
for i in $to_clean;do
	if [ -e "$i" ];then
		EXTRA_INFO_MESSAGE "Purging" "$i"
		rm -f "$i" || EXTRA_WARNING_MESSAGE "Unable to delete" "$i"
	fi
done

INITRD_SOURCE="`ls \"$WORK_DIR/FileSystem/boot/\"initrd.img-* | tail -1`"
VMLINUZ_SOURCE="`ls \"$WORK_DIR/FileSystem/boot/\"vmlinuz-* | tail -1`"
if [ ! -e "$INITRD_SOURCE" ] || [ ! -e "$VMLINUZ_SOURCE" ] ; then
	__mount_sys__
  INFO_MESSAGE "Purging Kernels (if any)"
	__chroot__ apt-get purge --yes linux-image* linux-headers* -qq
  INFO_MESSAGE "Installing Kernel"
  __chroot__ apt-get install --yes linux-image-generic linux-headers-generic -qq
	__umount_sys__
	__recursive_umount__
	
	INITRD_SOURCE="`ls \"$WORK_DIR/FileSystem/boot/\"initrd.img-* | tail -1`"
	VMLINUZ_SOURCE="`ls \"$WORK_DIR/FileSystem/boot/\"vmlinuz-* | tail -1`"
else
	__mount_sys__
  INFO_MESSAGE "Updating kernel image"
	__chroot__ update-initramfs -k all -t -u
	__umount_sys__
	__recursive_umount__
fi

EXTRA_INFO_MESSAGE "Copying initrd" "${INITRD_SOURCE#$WORK_DIR/FileSystem/boot/}"
cp -f "$INITRD_SOURCE" "$WORK_DIR/ISO/casper/initrd.lz" || ERROR_MESSAGE "Unable to copy initrd.img!"
if [[ $(grep -Rs "vmlinuz.efi" "$WORK_DIR/ISO") ]];then
	EXTRA_INFO_MESSAGE "Copying vmlinuz.efi" "${VMLINUZ_SOURCE#$WORK_DIR/FileSystem/boot/}"
	cp -f "$VMLINUZ_SOURCE" "$WORK_DIR/ISO/casper/vmlinuz.efi" || ERROR_MESSAGE "Unable to copy vmlinuz.efi!"
else
	EXTRA_INFO_MESSAGE "Copying vmlinuz" "${VMLINUZ_SOURCE#$WORK_DIR/FileSystem/boot/}"
	cp -f "$VMLINUZ_SOURCE" "$WORK_DIR/ISO/casper/vmlinuz" || ERROR_MESSAGE "Unable to copy vmlinuz!"
fi

if [ "$BOOT_FILES" = "1" ]; then
	INFO_MESSAGE "Deleteing boot files"
	rm -f "$WORK_DIR/FileSystem/boot/initrd.img"*
	rm -f "$WORK_DIR/FileSystem/boot/vmlinuz"*
	rm -f "$WORK_DIR/FileSystem/boot/config"*
fi

############################# Compress filesystem ##############################

INFO_MESSAGE "Creating squashed FileSystem"
# ugly, but it works. also checking for a future version
if [ "$(mksquashfs -version | head -n1 | grep -e '4.2' -e '4.3')" ];then
	mksquashfs "$WORK_DIR/FileSystem" "$WORK_DIR/ISO/casper/filesystem.squashfs" -wildcards -ef /etc/live-cd/exclude -comp ${COMPRESSION} || ERROR_MESSAGE "Unable to squash the FileSystem!"
else
	WARNING_MESSAGE "Old mksquashfs version detected, compress option omitted!"
	mksquashfs "$WORK_DIR/FileSystem" "$WORK_DIR/ISO/casper/filesystem.squashfs" -wildcards -ef /etc/live-cd/exclude || ERROR_MESSAGE "Unable to squash the FileSystem!"
fi

INFO_MESSAGE "Checking FileSystem size"
FS_SIZE="`du -sx  --block-size=1 "$WORK_DIR/ISO/casper/filesystem.squashfs" | cut -f1`"
if [ "$FS_SIZE" -gt "4000000000" ];then
	ERROR_MESSAGE "The squashed FileSystem size is greater than 4 gigabytes!"
fi

INFO_MESSAGE "Creating filesystem.size"
echo "$FS_SIZE" > "$WORK_DIR/ISO/casper/filesystem.size" || ERROR_MESSAGE "Unable to calculate the size of the FileSystem!"

INFO_MESSAGE "Creating filesystem.manifest"
chroot "$WORK_DIR/FileSystem" dpkg-query -W --showformat='${Package} ${Version}\n' > "$WORK_DIR/ISO/casper/filesystem.manifest" || ERROR_MESSAGE "Unable to create the filesystem.manifest!"
INFO_MESSAGE "Creating filesystem.manifest-desktop"
cp -f "$WORK_DIR/ISO/casper/filesystem.manifest" "$WORK_DIR/ISO/casper/filesystem.manifest-desktop"
for i in ubiquity casper live-initramfs user-setup discover1 xresprobe libdebian-installer4;do
    sed -i "/${i}/d" "$WORK_DIR/ISO/casper/filesystem.manifest-desktop"
done

INFO_MESSAGE "Creating README.diskdefines"
cat > "$WORK_DIR/ISO/README.diskdefines" << EOF
#define DISKNAME  $DIST $VERSION "$CODENAME" - Release $ARCH
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  $ARCH
#define ARCH$ARCH  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
EOF

INFO_MESSAGE "Creating disk info"
echo "$DIST $VERSION "$CODENAME" - Release $ARCH (`date "+%Y%m%d"`)" > "$WORK_DIR/ISO/.disk/info"

################# Creating md5sum and ISO  #################
cd "$WORK_DIR/ISO"
INFO_MESSAGE "Creating MD5Sum"
find . -type f \! -name 'md5sum.txt' -exec md5sum '{}' + > md5sum.txt || ERROR_MESSAGE "Unable to create the MD5Sum!"

INFO_MESSAGE "Creating image file"
(genisoimage -r -V "$DIST-$ARCH-$VERSION" -b isolinux/isolinux.bin -c isolinux/boot.cat \
-cache-inodes -J -l -no-emul-boot -boot-load-size 4 -boot-info-table \
-o "$WORK_DIR/$DIST-$ARCH-$VERSION.iso" -input-charset utf-8 .

chmod 555 "$WORK_DIR/$DIST-$ARCH-$VERSION.iso"
zenity --info --window-icon="info" --text "Distribution rebuild completed. Use 'exit' to quit properly." "$WORK_DIR/$DIST-$ARCH-$VERSION.iso"; read nada) \
|| ERROR_MESSAGE "Unable to create image file!"